#!/usr/bin/env escript

%% -----------------------------------------------------------------------------
%%
%% Erlang Version Checker.
%%
%% Copyright (c) 2010 Tim Watson (watson.timothy@gmail.com)
%%
%% Permission is hereby granted, free of charge, to any person obtaining a copy
%% of this software and associated documentation files (the "Software"), to deal
%% in the Software without restriction, including without limitation the rights
%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%% copies of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in
%% all copies or substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%% THE SOFTWARE.
%% -----------------------------------------------------------------------------
%% @author Tim Watson <watson.timothy@gmail.com>
%% @copyright 2010 Tim Watson.
%%
%% Prints to stdout, 0 if the required version is ok, otherwise 1
%%
%% Perhaps an exit status would be better, or some other mechanism? 
%% -----------------------------------------------------------------------------

main(Args) ->
    {A,B,C} = list_to_tuple(lists:map(fun(L) -> list_to_integer(L) end, string:tokens(hd(Args), "."))),
    {X,Y,Z} = list_to_tuple(lists:map(fun(L) -> list_to_integer(L) end, string:tokens(erlang:system_info(version), "."))),
    case check({X,Y,Z}, {A,B,C}) of
       true -> io:format("0", []);
       false -> io:format("1", [])
    end.

check({X1, _, _}, {X2, _, _}) when X1 > X2 -> true ;
check({X1, _, _}, {X2, _, _}) when X1 < X2 -> false ;
check({X1, Y1, Z1}, {X2, Y2, Z2}) when X1 == X2 -> check({Y1, Z1}, {Y2, Z2}) ;
check({Y1, _}, {Y2, _}) when Y1 > Y2 -> true ;
check({Y1, _}, {Y2, _}) when Y1 < Y2 -> false ;
check({Y1, Z1}, {Y2, Z2}) when Y1 == Y2 -> check(Z1, Z2) ;
check(Z1, Z2) -> Z1 >= Z2.
