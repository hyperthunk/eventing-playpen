#!/usr/bin/env escript

%% -----------------------------------------------------------------------------
%%
%% Erlang Dependency Checker.
%%
%% Copyright (c) 2010 Tim Watson (watson.timothy@gmail.com)
%%
%% Permission is hereby granted, free of charge, to any person obtaining a copy
%% of this software and associated documentation files (the "Software"), to deal
%% in the Software without restriction, including without limitation the rights
%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%% copies of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in
%% all copies or substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%% THE SOFTWARE.
%% -----------------------------------------------------------------------------
%% @author Tim Watson <watson.timothy@gmail.com>
%% @copyright 2010 Tim Watson.
%%
%% Prints to stdout, "y" if the required module/application needs installing,
%% otherwise "n" if it is already present. Currently only works for modules.
%%
%% Perhaps an exit status would be better, or some other mechanism? 
%% -----------------------------------------------------------------------------

main([Mod]) ->
  case code:which(list_to_atom(Mod)) of
    non_existing ->
      io:format("y", []);
    _ ->
      io:format("n", [])
  end;
main([Mod, Path]) ->
  Result = case code:which(list_to_atom(Mod)) of
    non_existing -> "y";
    Dir ->
      case lists:prefix(Path, Dir) of
        true -> "y";
        _ -> "n"
      end
  end,
  io:format(Result, []).
